swagger: '2.0'
info:
  description: 'This is a simple sample server. It can store and retrieve JSON documents from a DynamoDB.'
  version: '1.0.0'
  title: 'Simple API Template'
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
basePath: '/v2'
tags:
  - name: 'documents'
    description: 'Store and retrieve JSON documents'
schemes:
  - 'https'
  - 'http'
paths:
  /table/{tableName}:
    post:
      tags:
        - 'documents'
      summary: 'Add a new document to the data store'
      description: ''
      operationId: 'addDocument'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - name: 'tableName'
          in: 'path'
          description: 'Name of the DynamoDB table to be operated against'
          required: true
          type: 'string'
        - in: 'body'
          name: 'body'
          description: 'A new document that needs to be added to the data store. Note, if the input object has no property `id`, it will be generated and returned with the new object as `id`'
          required: true
          type: 'object'
          properties:
            id: 
              type: integer
              description: "Optionally, the ID can be specified. If none is specified, one will be created for you."
      responses:
        200:
          description: 'successful operation. Object returned has the new `id` assigned by the database, if none was specified originally.'
          schema:
            $ref: '#/definitions/Document'
        405:
          description: 'Invalid input'
    get:
      tags:
        - 'documents'
      summary: 'Get all documents'
      description: 'Returns all documents'
      operationId: 'getDocuments'
      produces:
        - 'application/json'
      parameters:
        - name: 'tableName'
          in: 'path'
          description: 'Name of the DynamoDB table to be operated against'
          required: true
          type: 'string'
      responses:
        200:
          description: 'successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Document'
        404:
          description: 'Document not found'
  /table/{tableName}/{documentId}:
    get:
      tags:
        - 'documents'
      summary: 'Find a document by ID'
      description: 'Returns a single document'
      operationId: 'getDocumentById'
      produces:
        - 'application/json'
      parameters:
        - name: 'tableName'
          in: 'path'
          description: 'Name of the DynamoDB table to be operated against'
          required: true
          type: 'string'
        - name: 'documentId'
          in: 'path'
          description: 'ID of document to return'
          required: true
          type: 'string'
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#/definitions/Document'
        404:
          description: 'Document not found'
    delete:
      tags:
        - 'documents'
      summary: 'Delete a document by ID'
      description: 'Deletes a document and returns its ID'
      operationId: 'deleteDocumentById'
      produces:
        - 'application/json'
      parameters:
        - name: 'tableName'
          in: 'path'
          description: 'Name of the DynamoDB table to be operated against'
          required: true
          type: 'string'
        - name: 'documentId'
          in: 'path'
          description: 'ID of document to delete'
          required: true
          type: 'string'
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#/definitions/Document'
        404:
          description: 'Document not found'
    put:
      tags:
        - 'documents'
      summary: 'Updates an exsisting document in the data store'
      description: ''
      operationId: 'updateDocument'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - name: 'tableName'
          in: 'path'
          description: 'Name of the DynamoDB table to be operated against'
          required: true
          type: 'string'
        - name: 'documentId'
          in: 'path'
          description: 'ID of document to update'
          required: true
          type: 'string'
        - in: 'body'
          name: 'body'
          description: 'An updated document that needs to be updated in the data store'
          required: true
          schema:
            $ref: '#/definitions/Document'
      responses:
        405:
          description: 'Document not found'
definitions:
  Document:
    type: 'object'
    properties:
      id:
        type: 'string'
  ApiResponse:
    type: 'object'
    properties:
      code:
        type: 'integer'
        format: 'int32'
      type:
        type: 'string'
      message:
        type: 'string'
